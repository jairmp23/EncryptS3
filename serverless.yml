service: daily-encryption

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    SOURCE_BUCKET: daily-encryption-source-bucket-${self:provider.stage}
    KMS_KEY_ID: arn:aws:kms:${self:provider.region}:${aws:accountId}:key/<your-kms-key-id> # Reemplaza con tu propio ARN de la clave KMS
    KEY_TABLE: daily-encryption-key-table-${self:provider.stage}
    STATE_MACHINE_ARN:
      Fn::Sub: arn:aws:states:${self:provider.region}:${AWS::AccountId}:stateMachine:DailyEncryptionProcessStateMachine
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "kms:*"
        - "dynamodb:*"
        - "states:*"
      Resource: "*"

plugins:
  - serverless-step-functions

functions:
  createKey:
    handler: createKey.handler
    environment:
      KMS_KEY_ID: ${self:provider.environment.KMS_KEY_ID}
      KEY_TABLE: ${self:provider.environment.KEY_TABLE}

  listFiles:
    handler: listFiles.handler
    environment:
      SOURCE_BUCKET: ${self:provider.environment.SOURCE_BUCKET}

  proccessFiles:
    handler: proccessFiles.handler
    environment:
      SOURCE_BUCKET: ${self:provider.environment.SOURCE_BUCKET}
      KMS_KEY_ID: ${self:provider.environment.KMS_KEY_ID}
      KEY_TABLE: ${self:provider.environment.KEY_TABLE}

  getKeys:
    handler: getKeys.handler
    environment:
      KEY_TABLE: ${self:provider.environment.KEY_TABLE}
      KMS_KEY_ID: ${self:provider.environment.KMS_KEY_ID}
    events:
      - http:
          path: keys
          method: get
          cors: true

stepFunctions:
  stateMachines:
    dailyEncryptionProcess:
      name: DailyEncryptionProcessStateMachine
      definition:
        Comment: "Daily encryption process"
        StartAt: "CreateKey"
        States:
          CreateKey:
            Type: "Task"
            Resource: !GetAtt CreateKeyLambdaFunction.Arn
            ResultPath: "$.keyInfo"
            Next: "ListFiles"
          ListFiles:
            Type: "Task"
            Resource: !GetAtt ListFilesLambdaFunction.Arn
            ResultPath: "$.files"
            Parameters:
              "date.$": "$.keyInfo.date"
            Next: "ProcessBatches"
          ProcessBatches:
            Type: "Map"
            ItemsPath: "$.files.batches"
            MaxConcurrency: 1
            Parameters:
              "batch.$": "$$.Map.Item.Value"
              "date.$": "$.files.date"
            Iterator:
              StartAt: "ProccessFiles"
              States:
                ProccessFiles:
                  Type: "Task"
                  Resource: !GetAtt ProccessFilesLambdaFunction.Arn
                  End: true
            End: true

resources:
  Resources:
    SourceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SOURCE_BUCKET}

    KeyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.KEY_TABLE}
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: date
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StartStateMachineSchedule:
      Type: AWS::Events::Rule
      Properties:
        ScheduleExpression: cron(9 3 * * ? *)
        State: ENABLED
        Targets:
          - Arn:
              Fn::Sub: "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:stepFunctions.stateMachines.dailyEncryptionProcess.name}"
            Id: "StartDailyEncryptionProcessStateMachine"
            RoleArn:
              Fn::GetAtt:
                - StartStateMachineExecutionRole
                - Arn

    StartStateMachineExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "events.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "StartStateMachineExecutionPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "states:StartExecution"
                  Resource:
                    - Fn::Sub: "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:stepFunctions.stateMachines.dailyEncryptionProcess.name}"

outputs:
  SourceBucketName:
    Value: !Ref SourceBucket
  KeyTableName:
    Value: !Ref KeyTable
  DailyEncryptionProcessStateMachineArn:
    Value:
      Ref: DailyEncryptionProcessStateMachine
    Export:
      Name: ${self:provider.stage}-DailyEncryptionProcessStateMachineArn
